---
import Header from "@/components/common/Header.astro";
import "@/styles/global.css";
import type { SupportedLanguage } from "@/utils/types";

export interface Props {
  title: string;
  description?: string;
  lang?: SupportedLanguage;
}

const currentLang = (Astro.currentLocale as SupportedLanguage) || "en";
const {
  title,
  description = "Modern interactive portfolio",
  lang = currentLang,
} = Astro.props;
---

<!doctype html>
<html lang={lang} data-theme="dark" class="transition-colors">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <script is:inline>
      const theme = (() => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      })();
      document.documentElement.setAttribute("data-theme", theme);

      window.localStorage.setItem("theme", theme);
    </script>
  </head>
  <body>
    <Header lang={lang} />
    <main
      id="main-content"
      role="main"
      aria-label="Main content"
      class="min-h-screen flex flex-col items-center overflow-y-visible"
    >
      <slot />
    </main>
  </body>
</html>

<script>
  // Theme and language initialization script - runs immediately to prevent flash
  (function () {
    // Language initialization
    const supportedLanguages = ["en", "es"];
    const defaultLanguage = "en";

    // Get language from URL path
    function getLanguageFromPath() {
      const segments = window.location.pathname.split("/").filter(Boolean);
      const firstSegment = segments[0];
      return supportedLanguages.includes(firstSegment) ? firstSegment : null;
    }

    // Get current language
    function getCurrentLanguage() {
      const pathLang = getLanguageFromPath();
      if (pathLang) return pathLang;

      const storedLang = localStorage.getItem("preferred-language");
      if (storedLang && supportedLanguages.includes(storedLang))
        return storedLang;

      const browserLang = navigator.language.split("-")[0];
      return supportedLanguages.includes(browserLang)
        ? browserLang
        : defaultLanguage;
    }

    const currentLang = getCurrentLanguage();
    document.documentElement.lang = currentLang;

    // Store language preference
    localStorage.setItem("preferred-language", currentLang);
  })();
</script>
